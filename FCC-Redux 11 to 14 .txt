
Challenge 11) Write a Counter with Redux = 

const INCREMENT = "INCREMENT" ; // Define a constant for increment action types
const DECREMENT = "DECREMENT" ; // Define a constant for decrement action types

const counterReducer = (state = 0, action) => {
  switch (action.type) {
    case INCREMENT:
      return state + 1;

    case DECREMENT:
      return state - 1;

    default:
      return state;
  }
}; // Define the counter reducer which will increment or decrement the state based on the action it receives


const incAction = () => {
  return {
    type: INCREMENT
  };// Define an action creator for incrementing
};


const decAction = () => {
  return {
    type: DECREMENT
  };
}; // Define an action creator for decrementing


const store = Redux.createStore(counterReducer);// Define the Redux store here, passing in your reducers


Challenge 12)  Never Mutate State = Immutable state means that you never modify state directly, instead, you return a new copy of state.

const ADD_TO_DO = 'ADD_TO_DO';

// A list of strings representing tasks to do:
const todos = [
  'Go to the store',
  'Clean the house',
  'Cook dinner',
  'Learn to code',
];

const immutableReducer = (state = todos, action) => {
  switch(action.type) {
    case ADD_TO_DO:
     return state.concat(action.todo);
      // Don't mutate state here or the tests will fail
      return
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: ADD_TO_DO,
    todo
  }
}

const store = Redux.createStore(immutableReducer);


Challenge 13) Use the Spread Operator on Arrays = One solution from ES6 to help enforce state immutability in Redux is the spread operator: ....
	it only provides immutable array operations for one-dimensional arrays.

const immutableReducer = (state = ['Do not mutate state!'], action) => {
  switch(action.type) {
    case 'ADD_TO_DO':

      // Don't mutate state here or the tests will fail
      let arr = [...state, action.todo];
      return arr;
      
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: 'ADD_TO_DO',
    todo
  }
}

const store = Redux.createStore(immutableReducer);



Challenge 13) Remove an Item from an Array = The reducer and action creator were modified to remove an item from an array based on the index of the item.

const immutableReducer = (state = [0,1,2,3,4,5], action) => {
  switch(action.type) {
    case 'REMOVE_ITEM':
      // Don't mutate state here or the tests will fail
      return [
        ...state.slice(0, action.index),
        ...state.slice(action.index + 1, state.length)
      ];
    default:
      return state;
  }
};

const removeItem = (index) => {
  return {
    type: 'REMOVE_ITEM',
    index
  }
}

const store = Redux.createStore(immutableReducer);


Challenge 14) Copy an Object with Object.assign = . Object.assign() takes a target object and source objects and maps properties from the source objects to the target object. 

const defaultState = {
  user: 'CamperBot',
  status: 'offline',
  friends: '732,982',
  community: 'freeCodeCamp'
};

const immutableReducer = (state = defaultState, action) => {
  switch(action.type) {
    case 'ONLINE':
      // Don't mutate state here or the tests will fail
      return Object.assign({}, state, { status: "online" });
    default:
      return state;
  }
};

const wakeUp = () => {
  return {
    type: 'ONLINE'
  }
};

const store = Redux.createStore(immutableReducer);

























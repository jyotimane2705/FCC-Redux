
Challenge 1) Getting Started with React Redux = In Redux, there is a single state object that's responsible for the entire state of your application.
	If you had a React app with ten components, and each component had its own local state, 
	the entire state of your app would be defined by a single state object

const reducer = (state = 5) => {
  return state;
}
 const store = Redux.createStore(reducer)	


Challenge 2) Get State from the Redux Store = The Redux store object provides several methods that allow you to interact with it. 

const store = Redux.createStore(
  (state = 5) => state
);

// Change code below this line
const currentState = store.getState()

Challenge 3) Define a Redux Action =  In Redux, all state updates are triggered by dispatching actions. 
	An action is simply a JavaScript object that contains information about an action event that has occurred. 
	The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data

let action = {
  type : 'LOGIN'
}

Challenge 4) Define an Action Creator = An action creator is simply a JavaScript function that returns an action. 
	action creators create objects that represent action events.
	sending the action to the Redux store so it can update its state.

const action = {
  type: 'LOGIN'
}
// Define an action creator here:
function  actionCreator(){
return action
}

Challenge 4) Dispatch an Action Event = dispatch method is what you use to dispatch actions to the Redux store. 

const store = Redux.createStore(
  (state = {login: false}) => state
);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};

// Dispatch the action here:
store.dispatch(loginAction());

Challenge 5) Handle an Action in the Store = After an action is created and dispatched, the Redux store needs to know how to respond to that action.
	This is the job of a reducer function. Reducers in Redux are responsible for the state modifications that take place in response to actions.
	A reducer takes state and action as arguments, and it always returns a new state

const defaultState = {
  login: false
};

const reducer = (state = defaultState, action) => {
  // change code below this line
  if (action.type === "LOGIN") {
    return {
      login: true
    };
  } else {
    return state;
  }
  // change code above this line
};

const store = Redux.createStore(reducer);

const loginAction = () => {
  return {
    type: "LOGIN"
  };
};






























